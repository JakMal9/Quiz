diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..31a22ed
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,7 @@
+__pycache__/
+.pytest_cache/
+*.pyc
+.egg-info/
+*.egg-info/
+.idea/
+*.idea
diff --git a/quiz_app/questions/migrations/0002_useranswer.py b/quiz_app/questions/migrations/0002_useranswer.py
new file mode 100644
index 0000000..bc1771a
--- /dev/null
+++ b/quiz_app/questions/migrations/0002_useranswer.py
@@ -0,0 +1,45 @@
+# Generated by Django 4.0.5 on 2022-07-13 20:51
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ("questions", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="UserAnswer",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("answered_at", models.DateTimeField(auto_now_add=True)),
+                (
+                    "author",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+                (
+                    "question_answer",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        to="questions.questionanswer",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/quiz_app/questions/models.py b/quiz_app/questions/models.py
index f2c46cb..006f38c 100755
--- a/quiz_app/questions/models.py
+++ b/quiz_app/questions/models.py
@@ -1,3 +1,4 @@
+from django.conf import settings
 from django.db import models
 
 
@@ -23,3 +24,12 @@ class QuestionAnswer(models.Model):
 
     def __str__(self):
         return f"{self.question} - {self.answer}, correct: {self.correct}"
+
+
+class UserAnswer(models.Model):
+    answered_at = models.DateTimeField(auto_now_add=True)
+    question_answer = models.ForeignKey(QuestionAnswer, on_delete=models.CASCADE)
+    author = models.ForeignKey(
+        settings.AUTH_USER_MODEL,
+        on_delete=models.CASCADE,
+    )
diff --git a/quiz_app/questions/templates/questions.html b/quiz_app/questions/templates/questions.html
index bf113ae..9ad185b 100644
--- a/quiz_app/questions/templates/questions.html
+++ b/quiz_app/questions/templates/questions.html
@@ -1,3 +1,10 @@
+{% if messages %}
+<ul class="messages">
+    {% for message in messages %}
+    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
+    {% endfor %}
+</ul>
+{% endif %}
 {% if questions %}
     <ul>
         {% for question in questions %}
diff --git a/quiz_app/questions/templates/user_answers.html b/quiz_app/questions/templates/user_answers.html
new file mode 100644
index 0000000..f83345d
--- /dev/null
+++ b/quiz_app/questions/templates/user_answers.html
@@ -0,0 +1,17 @@
+<h3>{{ username }}</h3>
+<table>
+    <tr>
+        <th>Question</th>
+        <th>Answer</th>
+        <th>Was correct</th>
+        <th>Date</th>
+    </tr>
+    {% for user_answer in user_answers %}
+    <tr>
+        <td>{{ user_answer.question_answer.question.content }}</td>
+        <td>{{ user_answer.question_answer.answer.content }}</td>
+        <td>{{ user_answer.question_answer.correct }}</td>
+        <td>{{ user_answer.answered_at|date:'Y-m-d H:i'}}</td>
+    </tr>
+    {% endfor %}
+</table>
\ No newline at end of file
diff --git a/quiz_app/questions/urls.py b/quiz_app/questions/urls.py
index 460654e..634d7a2 100644
--- a/quiz_app/questions/urls.py
+++ b/quiz_app/questions/urls.py
@@ -5,6 +5,7 @@ from . import views
 
 urlpatterns = [
     path("", views.questions_list, name="questions_list"),
+    path("user/answers/", views.user_answers, name="user_answers"),
     path("<int:question_id>/", views.question_details, name="question_details"),
     path("<int:question_id>/answer/", views.correct_answer, name="correct_answer"),
     path(
diff --git a/quiz_app/questions/views.py b/quiz_app/questions/views.py
index 82baee3..86c82e1 100644
--- a/quiz_app/questions/views.py
+++ b/quiz_app/questions/views.py
@@ -1,25 +1,30 @@
 import json
 
-from django.http import Http404, JsonResponse
+from django.contrib import messages
+from django.contrib.auth.decorators import login_required
+from django.http import Http404, HttpRequest, HttpResponse, JsonResponse
 from django.shortcuts import get_object_or_404, redirect, render
-from django.views.decorators.http import require_POST
+from django.views.decorators.http import require_GET, require_POST
 
 from .forms import AnswerForm
-from .models import Question, QuestionAnswer
+from .models import Question, QuestionAnswer, UserAnswer
 
 
-def questions_list(request):
+@login_required(login_url="/auth/login/")
+def questions_list(request: HttpRequest) -> HttpResponse:
     questions = Question.objects.all()
     return render(request, "./questions.html", {"questions": questions})
 
 
-def question_details(request, question_id):
+@login_required(login_url="/auth/login/")
+def question_details(request: HttpRequest, question_id: int) -> HttpResponse:
     question = get_object_or_404(Question, pk=question_id)
     return render(request, "question.html", {"question": question})
 
 
 @require_POST
-def correct_answer(request, question_id):
+@login_required(login_url="/auth/login/")
+def correct_answer(request: HttpRequest, question_id: int) -> HttpResponse:
     """We could have data submitted either by AJAX or html form."""
     try:
         if request.POST:
@@ -36,6 +41,21 @@ def correct_answer(request, question_id):
     except (QuestionAnswer.DoesNotExist, KeyError, ValueError):
         raise Http404()
     res = {"correct": question_answers.correct}
+    UserAnswer.objects.create(question_answer=question_answers, author=request.user)
     if request.POST:
         return render(request, "answer.html", {"question_id": question_id, **res})
     return JsonResponse(res)
+
+
+@require_GET
+@login_required(login_url="/auth/login/")
+def user_answers(request: HttpRequest) -> HttpResponse:
+    answers = UserAnswer.objects.filter(author=request.user)
+    if answers.count() == 0:
+        messages.success(request, "Try to answer some questions first")
+        return redirect("questions_list")
+    return render(
+        request,
+        "user_answers.html",
+        {"username": answers[0].author.username, "user_answers": answers},
+    )
diff --git a/quiz_app/quiz_app/settings.py b/quiz_app/quiz_app/settings.py
index 809dd44..df83e0b 100755
--- a/quiz_app/quiz_app/settings.py
+++ b/quiz_app/quiz_app/settings.py
@@ -39,6 +39,7 @@ INSTALLED_APPS = [
     "django.contrib.messages",
     "django.contrib.staticfiles",
     "questions.apps.QuestionsConfig",
+    "user.apps.UserConfig",
 ]
 
 MIDDLEWARE = [
diff --git a/quiz_app/quiz_app/tests/conftest.py b/quiz_app/quiz_app/tests/conftest.py
index 90c03ef..6ab2bde 100644
--- a/quiz_app/quiz_app/tests/conftest.py
+++ b/quiz_app/quiz_app/tests/conftest.py
@@ -1,10 +1,16 @@
+import datetime
+from typing import Generator
+from unittest.mock import Mock, patch
+
 import pytest
+from django.contrib.auth.models import User
+from django.test import Client
 
-from questions.models import Question
+from questions.models import Question, QuestionAnswer, UserAnswer
 
 
 @pytest.fixture
-def question() -> dict[str]:
+def question() -> dict[str, str]:
     return {
         "content": "Which Disney character famously leaves a glass slipper behind at a royal ball?"
     }
@@ -24,10 +30,44 @@ def answers() -> list[dict]:
 
 @pytest.fixture
 @pytest.mark.django_db
-def question_with_answers(question, answers):
+def question_with_answers(question: dict[str, str], answers: list[dict]) -> None:
     new_question = Question.objects.create(**question)
     for answer in answers:
         content = answer["content"]
         new_question.answers.create(
             content=content, through_defaults={"correct": content == "Cinderella"}
         )
+
+
+@pytest.fixture
+@pytest.mark.django_db
+def registered_user(django_user_model: User) -> User:
+    user = django_user_model.objects.create_user(username="test", password="test")
+    return user
+
+
+@pytest.fixture
+def authenticated_client(client: Client, registered_user: User) -> Client:
+    client.force_login(registered_user)
+    return client
+
+
+@pytest.fixture
+def fake_now() -> datetime.datetime:
+    return datetime.datetime(2022, 7, 10, 11, 0, 0, tzinfo=datetime.timezone.utc)
+
+
+@pytest.fixture(autouse=True)
+def patch_datetime_now(fake_now) -> Generator:
+    with patch("django.utils.timezone.now", Mock(return_value=fake_now)):
+        yield
+
+
+@pytest.fixture
+@pytest.mark.django_db
+def user_answers(question_with_answers: None, registered_user: User) -> None:
+    question_answers = QuestionAnswer.objects.all()
+    for question_answer in question_answers:
+        UserAnswer.objects.create(
+            question_answer=question_answer, author=registered_user
+        )
diff --git a/quiz_app/quiz_app/tests/test_models.py b/quiz_app/quiz_app/tests/test_models.py
index a5b8b64..8680927 100755
--- a/quiz_app/quiz_app/tests/test_models.py
+++ b/quiz_app/quiz_app/tests/test_models.py
@@ -1,7 +1,10 @@
+import datetime
+from typing import Generator
+
 import pytest
 from django.contrib.auth.models import User
 
-from questions.models import Answer, Question, QuestionAnswer
+from questions.models import Answer, Question, QuestionAnswer, UserAnswer
 
 
 @pytest.mark.django_db
@@ -11,7 +14,9 @@ def test_user_create():
 
 
 @pytest.mark.django_db
-def test_create_new_question_with_answers(question, answers):
+def test_create_new_question_with_answers(
+    question: dict[str, str], answers: list[dict]
+) -> None:
     new_question = Question.objects.create(**question)
     for answer in answers:
         content = answer["content"]
@@ -20,8 +25,24 @@ def test_create_new_question_with_answers(question, answers):
         )
     assert Question.objects.count() == 1
     assert Answer.objects.count() == QuestionAnswer.objects.count() == 4
-    question = Question.objects.first()
-    assert question.answers.count() == 4
-    correct_answer = question.answers.filter(questionanswer__correct=True)
+    question_db = Question.objects.first()
+    assert question_db.answers.count() == 4
+    correct_answer = question_db.answers.filter(questionanswer__correct=True)
     assert len(correct_answer) == 1
     assert correct_answer[0].content == "Cinderella"
+
+
+@pytest.mark.django_db
+def test_create_user_answer(
+    question_with_answers: QuestionAnswer,
+    registered_user: User,
+    fake_now: datetime.datetime,
+    patch_datetime_now: Generator,
+) -> None:
+    question_answer = QuestionAnswer.objects.first()
+    user = User.objects.first()
+    UserAnswer.objects.create(author=user, question_answer=question_answer)
+    user_answer = UserAnswer.objects.first()
+    assert user_answer.author == user
+    assert user_answer.question_answer == question_answer
+    assert user_answer.answered_at == fake_now
diff --git a/quiz_app/quiz_app/tests/test_questions_views.py b/quiz_app/quiz_app/tests/test_questions_views.py
index 0fabb79..1e6f0b4 100644
--- a/quiz_app/quiz_app/tests/test_questions_views.py
+++ b/quiz_app/quiz_app/tests/test_questions_views.py
@@ -1,20 +1,29 @@
+import datetime
+from typing import Generator, Union
+
 import pytest
+from django.contrib.messages import get_messages
+from django.test import Client
 
-from questions.models import Answer, Question, QuestionAnswer
+from questions.models import Answer, Question, QuestionAnswer, UserAnswer
 
 
 @pytest.mark.django_db
-def test_questions_list_view(client, question_with_answers):
+def test_questions_list_view(
+    authenticated_client: Client, question_with_answers: None
+) -> None:
     question_db = Question.objects.first()
-    res = client.get("/questions/")
+    res = authenticated_client.get("/questions/")
     assert res.status_code == 200
     assert question_db.content in res.content.decode("utf-8")
 
 
 @pytest.mark.django_db
-def test_question_details_view(client, question_with_answers):
+def test_question_details_view(
+    authenticated_client: Client, question_with_answers: None
+) -> None:
     question_db = Question.objects.first()
-    res = client.get(f"/questions/{question_db.pk}/")
+    res = authenticated_client.get(f"/questions/{question_db.pk}/")
     assert res.status_code == 200
     assert question_db.content in res.content.decode("utf-8")
     for answer in question_db.answers.all():
@@ -22,9 +31,11 @@ def test_question_details_view(client, question_with_answers):
 
 
 @pytest.mark.django_db
-def test_question_details_view_index_out_of_range(client, question_with_answers):
+def test_question_details_view_index_out_of_range(
+    authenticated_client: Client, question_with_answers: None
+) -> None:
     question_last_id = Question.objects.last().pk
-    res = client.get(f"/questions/{question_last_id + 1}/")
+    res = authenticated_client.get(f"/questions/{question_last_id + 1}/")
     assert res.status_code == 404
 
 
@@ -32,18 +43,32 @@ def test_question_details_view_index_out_of_range(client, question_with_answers)
 @pytest.mark.parametrize(
     "content_type", ["multipart/form-data; boundary=BoUnDaRyStRiNg", "application/json"]
 )
-def test_answer_view(client, question_with_answers, content_type):
+def test_answer_view(
+    authenticated_client: Client,
+    question_with_answers: None,
+    content_type: str,
+    fake_now: datetime.datetime,
+    patch_datetime_now: Generator,
+) -> None:
     questionanswers_db = QuestionAnswer.objects.all()
-    content_type = {"content_type": content_type} if "json" in content_type else {}
+    user_id = authenticated_client.session["_auth_user_id"]
+    content_type_header: dict = (
+        {"content_type": content_type} if "json" in content_type else {}
+    )
     for qa in questionanswers_db:
         payload = {"answer": qa.answer.pk}
-        res = client.post(
+        res = authenticated_client.post(
             f"/questions/{qa.question.pk}/answer/",
             payload,
-            **content_type,
+            **content_type_header,
         )
         assert res.status_code == 200
-        if content_type:
+
+        # Check if answer was save down for logged in user
+        user_answer = UserAnswer.objects.get(question_answer=qa, author__pk=user_id)
+        assert user_answer.answered_at == fake_now
+
+        if content_type_header:
             assert res.json()["correct"] == qa.correct
         else:
             expected_msg = (
@@ -51,24 +76,32 @@ def test_answer_view(client, question_with_answers, content_type):
             )
             assert expected_msg in res.content.decode("utf-8")
 
+    # Check whether all answers were save down logged in user
+    assert (
+        UserAnswer.objects.filter(author__pk=user_id).count()
+        == questionanswers_db.count()
+    )
+
 
 @pytest.mark.parametrize("method", ["get", "put", "patch", "delete"])
-def test_answer_view_method_not_allowed(client, method):
+def test_answer_view_method_not_allowed(client: Client, method: str) -> None:
     res = getattr(client, method)(f"/questions/1/answer/")
     assert res.status_code == 405
 
 
 @pytest.mark.django_db
-def test_answer_view_index_out_of_range(client, question_with_answers):
+def test_answer_view_index_out_of_range(
+    authenticated_client: Client, question_with_answers: None
+) -> None:
     last_question_id = Question.objects.last().pk
     last_answer_id = Answer.objects.last().pk
     out_of_range_q_id = last_question_id + 1
     out_of_range_a_id = last_answer_id + 1
-    res = client.post(
+    res = authenticated_client.post(
         f"/questions/{out_of_range_q_id}/answer/", {"answer": last_answer_id}
     )
     assert res.status_code == 404
-    res = client.post(
+    res = authenticated_client.post(
         f"/questions/{last_question_id}/answer/", {"answer": out_of_range_a_id}
     )
     assert res.status_code == 404
@@ -80,13 +113,93 @@ def test_answer_view_index_out_of_range(client, question_with_answers):
     "content_type", ["multipart/form-data; boundary=BoUnDaRyStRiNg", "application/json"]
 )
 def test_answer_view_incorrect_payload(
-    client, question_with_answers, answer, content_type
-):
+    authenticated_client: Client,
+    question_with_answers: None,
+    answer: Union[str, float],
+    content_type: str,
+) -> None:
     qa_db = QuestionAnswer.objects.first()
-    content_type = {"content_type": content_type} if "json" in content_type else {}
+    content_type_header: dict = (
+        {"content_type": content_type} if "json" in content_type else {}
+    )
     payload = {"answer": answer}
-    res = client.post(
-        f"/questions/{qa_db.question.pk}/answer/", payload, **content_type
+    res = authenticated_client.post(
+        f"/questions/{qa_db.question.pk}/answer/", payload, **content_type_header
     )
     assert res.status_code == 302
     assert res.url == f"/questions/{qa_db.question.pk}/"
+
+
+@pytest.mark.django_db
+@pytest.mark.parametrize("route", ["/questions/", "/questions/{pk}/"])
+def test_question_routes_unauthorized(
+    client: Client, question_with_answers: None, route: str
+) -> None:
+    if "pk" in route:
+        question_id = Question.objects.first().pk
+        route = route.format(pk=question_id)
+    res = client.get(route)
+    assert res.status_code == 302
+    assert "/auth/login/" in res.url
+
+
+@pytest.mark.django_db
+@pytest.mark.parametrize(
+    "content_type", ["multipart/form-data; boundary=BoUnDaRyStRiNg", "application/json"]
+)
+def test_answer_view_unauthorized(
+    client: Client, question_with_answers: None, content_type: str
+) -> None:
+    questionanswers_db = QuestionAnswer.objects.all()
+    content_type_header: dict = (
+        {"content_type": content_type} if "json" in content_type else {}
+    )
+    for qa in questionanswers_db:
+        payload = {"answer": qa.answer.pk}
+        res = client.post(
+            f"/questions/{qa.question.pk}/answer/",
+            payload,
+            **content_type_header,
+        )
+        assert res.status_code == 302
+        assert "/auth/login/" in res.url
+
+
+@pytest.mark.django_db
+def test_user_answers_empty(
+    authenticated_client: Client, question_with_answers: None
+) -> None:
+    res = authenticated_client.get("/questions/user/answers/")
+    assert res.status_code == 302
+    assert "/questions/" in res.url
+    assert (
+        get_messages(res.wsgi_request)._queued_messages[0].__dict__["message"]
+        == "Try to answer some questions first"
+    )
+
+
+@pytest.mark.parametrize("method", ["post", "put", "patch", "delete"])
+def test_user_answers_view_method_not_allowed(client: Client, method: str) -> None:
+    res = getattr(client, method)(f"/questions/user/answers/")
+    assert res.status_code == 405
+
+
+@pytest.mark.django_db
+def test_user_answers_view_unauthorized(client: Client, user_answers: None) -> None:
+    res = client.get("/questions/user/answers/")
+    assert res.status_code == 302
+    assert "/auth/login/" in res.url
+
+
+@pytest.mark.django_db
+def test_user_answers_view_correct(
+    authenticated_client: Client, user_answers: None
+) -> None:
+    res = authenticated_client.get("/questions/user/answers/")
+    assert res.status_code == 200
+    user_answers_db = UserAnswer.objects.all()
+    for answer in user_answers_db:
+        assert answer.author.username in res.content.decode("utf-8")
+        assert answer.question_answer.question.content in res.content.decode("utf-8")
+        assert answer.question_answer.answer.content in res.content.decode("utf-8")
+        assert str(answer.question_answer.correct) in res.content.decode("utf-8")
diff --git a/quiz_app/quiz_app/tests/test_user_views.py b/quiz_app/quiz_app/tests/test_user_views.py
new file mode 100644
index 0000000..825a2d9
--- /dev/null
+++ b/quiz_app/quiz_app/tests/test_user_views.py
@@ -0,0 +1,31 @@
+import pytest
+from django.contrib.auth.models import User
+from django.test import Client
+
+
+@pytest.mark.django_db
+def test_login_view_correct_data(client: Client, registered_user: User) -> None:
+    user = registered_user
+    res = client.post(
+        "/auth/login/", data={"username": user.username, "password": "test"}
+    )
+    assert res.status_code == 302
+    assert res.url == "/questions/"
+    assert client.session._SessionBase__session_key is not None
+
+
+@pytest.mark.django_db
+def test_login_view_incorrect_data(client: Client, registered_user: User) -> None:
+    user = registered_user
+    res = client.post(
+        "/auth/login/", data={"username": user.username, "password": "wrong"}
+    )
+    assert res.status_code == 200
+    assert "Please enter a correct username and password" in res.content.decode("utf-8")
+
+
+def test_logout(authenticated_client: Client) -> None:
+    res = authenticated_client.get("/auth/logout/")
+    assert res.status_code == 302
+    assert res.url == "/auth/login/"
+    assert authenticated_client.session._SessionBase__session_key is None
diff --git a/quiz_app/quiz_app/urls.py b/quiz_app/quiz_app/urls.py
index dd53612..df3d688 100755
--- a/quiz_app/quiz_app/urls.py
+++ b/quiz_app/quiz_app/urls.py
@@ -17,6 +17,7 @@ from django.contrib import admin
 from django.urls import include, path
 
 urlpatterns = [
+    path("auth/", include("user.urls")),
     path("questions/", include("questions.urls")),
     path("admin/", admin.site.urls),
 ]
diff --git a/quiz_app/user/__init__.py b/quiz_app/user/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/quiz_app/user/apps.py b/quiz_app/user/apps.py
new file mode 100644
index 0000000..578292c
--- /dev/null
+++ b/quiz_app/user/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class UserConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "user"
diff --git a/quiz_app/user/templates/login.html b/quiz_app/user/templates/login.html
new file mode 100644
index 0000000..fddeaec
--- /dev/null
+++ b/quiz_app/user/templates/login.html
@@ -0,0 +1,29 @@
+{% if form.errors %}
+    {% for error in form.errors %}
+        <p>{{ error }}</p>
+    {% endfor %}
+{% endif %}
+<p>{{ form.non_field_errors }}</p>
+{% if messages %}
+<ul class="messages">
+    {% for message in messages %}
+    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
+    {% endfor %}
+</ul>
+{% endif %}
+<form method="post" action="{% url 'login' %}">
+    {% csrf_token %}
+    <table>
+    <tr>
+        <td>{{ form.username.label_tag }}</td>
+        <td>{{ form.username }}</td>
+    </tr>
+    <tr>
+        <td>{{ form.password.label_tag }}</td>
+        <td>{{ form.password }}</td>
+    </tr>
+    </table>
+    
+    <input type="submit" value="login">
+    <!-- <input type="hidden" name="next" value="{{ next }}"> -->
+</form>
\ No newline at end of file
diff --git a/quiz_app/user/urls.py b/quiz_app/user/urls.py
new file mode 100644
index 0000000..ebcee76
--- /dev/null
+++ b/quiz_app/user/urls.py
@@ -0,0 +1,8 @@
+from django.urls import path
+
+from . import views
+
+urlpatterns = [
+    path("login/", views.login_view, name="login"),
+    path("logout/", views.logout_view, name="logout"),
+]
diff --git a/quiz_app/user/views.py b/quiz_app/user/views.py
new file mode 100644
index 0000000..571b568
--- /dev/null
+++ b/quiz_app/user/views.py
@@ -0,0 +1,30 @@
+from django.contrib import messages
+from django.contrib.auth import authenticate, login, logout
+from django.contrib.auth.forms import AuthenticationForm
+from django.http import HttpRequest, HttpResponse
+from django.shortcuts import redirect, render
+
+
+def login_view(request: HttpRequest) -> HttpResponse:
+    if request.user.is_authenticated:
+        messages.success(request, "You are already logged in")
+        return redirect("questions_list")
+    form = AuthenticationForm()
+    if request.POST:
+        form = AuthenticationForm(data=request.POST)
+        if form.is_valid():
+            username = form.cleaned_data.get("username")
+            password = form.cleaned_data.get("password")
+            user = authenticate(request, username=username, password=password)
+            if user is not None:
+                login(request, user)
+                messages.success(request, "Successfully logged in")
+                return redirect("questions_list")
+    context = {"form": form}
+    return render(request, "login.html", context)
+
+
+def logout_view(request: HttpRequest) -> HttpResponse:
+    logout(request)
+    messages.success(request, "Successfully logged out")
+    return redirect("login")
